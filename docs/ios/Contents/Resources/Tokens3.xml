<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/BTDeviceManager.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/BTDeviceManager</TokenIdentifier>
			<Abstract type="html">This manager handles the overall connection and discovery of the bluetooth
devices.  It performs scanning, connectivity and management of the devices for
the selection view controllers.  This class is a singleton object because multiple
instances cause problems with false posivitives for device connection and lost information
based on OS level caching.
WARNING: Care must be take in assigning the delegate for this object. It is possible to
produce side affects to other objects that are using this manager if care is not taken
when updating this instance variable since the delegate can only reference one controlling
object.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
            
			
			<NodeRef refid="3"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/set_selectedHeartMonitor:</TokenIdentifier>
			<Abstract type="html">The heart monitor that is currently selected.  The value may be nil when nothing is selected
and is part of the design.  This variable should only be accessed using selectedHeartMonitor
and setSelectedHeartMonitor because the delegate is notified of any changes to this value.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property id&lt;HeartMonitorProtocol,DeviceCommonInfoInterface&gt; _selectedHeartMonitor</Declaration>
			
			
			<Anchor>//api/name/_selectedHeartMonitor</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/_selectedHeartMonitor</TokenIdentifier>
			<Abstract type="html">The heart monitor that is currently selected.  The value may be nil when nothing is selected
and is part of the design.  This variable should only be accessed using selectedHeartMonitor
and setSelectedHeartMonitor because the delegate is notified of any changes to this value.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property id&lt;HeartMonitorProtocol,DeviceCommonInfoInterface&gt; _selectedHeartMonitor</Declaration>
			
			
			<Anchor>//api/name/_selectedHeartMonitor</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/BTDeviceManager/_selectedHeartMonitor</TokenIdentifier>
			<Abstract type="html">The heart monitor that is currently selected.  The value may be nil when nothing is selected
and is part of the design.  This variable should only be accessed using selectedHeartMonitor
and setSelectedHeartMonitor because the delegate is notified of any changes to this value.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property id&lt;HeartMonitorProtocol,DeviceCommonInfoInterface&gt; _selectedHeartMonitor</Declaration>
			
			
			<Anchor>//api/name/_selectedHeartMonitor</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/set_selectedActivityMonitor:</TokenIdentifier>
			<Abstract type="html">The activity monitor that is currently selected.  The value may be nil when nothing is selected
and is part of the design. This variable should only be accessed using selectedActivityMonitor
and setSelectedActivityMonitor because the delegate is notified of any changes to this value.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property id&lt;ActivityMonitorProtocol,DeviceCommonInfoInterface&gt; _selectedActivityMonitor</Declaration>
			
			
			<Anchor>//api/name/_selectedActivityMonitor</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/_selectedActivityMonitor</TokenIdentifier>
			<Abstract type="html">The activity monitor that is currently selected.  The value may be nil when nothing is selected
and is part of the design. This variable should only be accessed using selectedActivityMonitor
and setSelectedActivityMonitor because the delegate is notified of any changes to this value.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property id&lt;ActivityMonitorProtocol,DeviceCommonInfoInterface&gt; _selectedActivityMonitor</Declaration>
			
			
			<Anchor>//api/name/_selectedActivityMonitor</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/BTDeviceManager/_selectedActivityMonitor</TokenIdentifier>
			<Abstract type="html">The activity monitor that is currently selected.  The value may be nil when nothing is selected
and is part of the design. This variable should only be accessed using selectedActivityMonitor
and setSelectedActivityMonitor because the delegate is notified of any changes to this value.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property id&lt;ActivityMonitorProtocol,DeviceCommonInfoInterface&gt; _selectedActivityMonitor</Declaration>
			
			
			<Anchor>//api/name/_selectedActivityMonitor</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/setHeartDevices:</TokenIdentifier>
			<Abstract type="html">The array containing any devices that conform to the HeartMonitorProtocol.  It is used by the
heart monitor selection view controller for listing possible devices to use.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property NSArray *heartDevices</Declaration>
			
			
			<Anchor>//api/name/heartDevices</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/heartDevices</TokenIdentifier>
			<Abstract type="html">The array containing any devices that conform to the HeartMonitorProtocol.  It is used by the
heart monitor selection view controller for listing possible devices to use.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property NSArray *heartDevices</Declaration>
			
			
			<Anchor>//api/name/heartDevices</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/BTDeviceManager/heartDevices</TokenIdentifier>
			<Abstract type="html">The array containing any devices that conform to the HeartMonitorProtocol.  It is used by the
heart monitor selection view controller for listing possible devices to use.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property NSArray *heartDevices</Declaration>
			
			
			<Anchor>//api/name/heartDevices</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/setActivityDevices:</TokenIdentifier>
			<Abstract type="html">The array containing any devices that conform to the ActivityMonitorProtocol.  It is used by the
activity monitor selection view controller for listing possible devices to use.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property NSArray *activityDevices</Declaration>
			
			
			<Anchor>//api/name/activityDevices</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/activityDevices</TokenIdentifier>
			<Abstract type="html">The array containing any devices that conform to the ActivityMonitorProtocol.  It is used by the
activity monitor selection view controller for listing possible devices to use.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property NSArray *activityDevices</Declaration>
			
			
			<Anchor>//api/name/activityDevices</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/BTDeviceManager/activityDevices</TokenIdentifier>
			<Abstract type="html">The array containing any devices that conform to the ActivityMonitorProtocol.  It is used by the
activity monitor selection view controller for listing possible devices to use.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property NSArray *activityDevices</Declaration>
			
			
			<Anchor>//api/name/activityDevices</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/setSelectedIndexForHeartMonitor:</TokenIdentifier>
			<Abstract type="html">The index of the heart monitor device that has been selected.  It is used by the heart monitor
select view controller to indicate which one is selected.  If the value is -1, then no device
has been selected.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property NSInteger selectedIndexForHeartMonitor</Declaration>
			
			
			<Anchor>//api/name/selectedIndexForHeartMonitor</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/selectedIndexForHeartMonitor</TokenIdentifier>
			<Abstract type="html">The index of the heart monitor device that has been selected.  It is used by the heart monitor
select view controller to indicate which one is selected.  If the value is -1, then no device
has been selected.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property NSInteger selectedIndexForHeartMonitor</Declaration>
			
			
			<Anchor>//api/name/selectedIndexForHeartMonitor</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/BTDeviceManager/selectedIndexForHeartMonitor</TokenIdentifier>
			<Abstract type="html">The index of the heart monitor device that has been selected.  It is used by the heart monitor
select view controller to indicate which one is selected.  If the value is -1, then no device
has been selected.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property NSInteger selectedIndexForHeartMonitor</Declaration>
			
			
			<Anchor>//api/name/selectedIndexForHeartMonitor</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/setSelectedIndexForActivityMonitor:</TokenIdentifier>
			<Abstract type="html">The index of the activity monitor device that has been selected.  It is used by the activity monitor
select view controller to indicate which one is selected.  If the value is -1, then no device
has been selected.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property NSInteger selectedIndexForActivityMonitor</Declaration>
			
			
			<Anchor>//api/name/selectedIndexForActivityMonitor</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/selectedIndexForActivityMonitor</TokenIdentifier>
			<Abstract type="html">The index of the activity monitor device that has been selected.  It is used by the activity monitor
select view controller to indicate which one is selected.  If the value is -1, then no device
has been selected.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property NSInteger selectedIndexForActivityMonitor</Declaration>
			
			
			<Anchor>//api/name/selectedIndexForActivityMonitor</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/BTDeviceManager/selectedIndexForActivityMonitor</TokenIdentifier>
			<Abstract type="html">The index of the activity monitor device that has been selected.  It is used by the activity monitor
select view controller to indicate which one is selected.  If the value is -1, then no device
has been selected.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property NSInteger selectedIndexForActivityMonitor</Declaration>
			
			
			<Anchor>//api/name/selectedIndexForActivityMonitor</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/setIsInDiscoveryMode:</TokenIdentifier>
			<Abstract type="html">This flag indicates that the manager is in discovery mode and that addition scans must be performed
to get the characteristics and services of the devices as they are discovered and connected.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property BOOL isInDiscoveryMode</Declaration>
			
			
			<Anchor>//api/name/isInDiscoveryMode</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/isInDiscoveryMode</TokenIdentifier>
			<Abstract type="html">This flag indicates that the manager is in discovery mode and that addition scans must be performed
to get the characteristics and services of the devices as they are discovered and connected.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property BOOL isInDiscoveryMode</Declaration>
			
			
			<Anchor>//api/name/isInDiscoveryMode</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/BTDeviceManager/isInDiscoveryMode</TokenIdentifier>
			<Abstract type="html">This flag indicates that the manager is in discovery mode and that addition scans must be performed
to get the characteristics and services of the devices as they are discovered and connected.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property BOOL isInDiscoveryMode</Declaration>
			
			
			<Anchor>//api/name/isInDiscoveryMode</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/setManager:</TokenIdentifier>
			<Abstract type="html">The bluetooth connection manager that tracks the CBPeripherals.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property (retain) CBCentralManager *manager</Declaration>
			
			
			<Anchor>//api/name/manager</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/manager</TokenIdentifier>
			<Abstract type="html">The bluetooth connection manager that tracks the CBPeripherals.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property (retain) CBCentralManager *manager</Declaration>
			
			
			<Anchor>//api/name/manager</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/BTDeviceManager/manager</TokenIdentifier>
			<Abstract type="html">The bluetooth connection manager that tracks the CBPeripherals.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property (retain) CBCentralManager *manager</Declaration>
			
			
			<Anchor>//api/name/manager</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/setSearchType:</TokenIdentifier>
			<Abstract type="html">This value indicates what services the manager should scan and connect.  For details see DeviceTypes.h</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property NSInteger searchType</Declaration>
			
			
			<Anchor>//api/name/searchType</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/searchType</TokenIdentifier>
			<Abstract type="html">This value indicates what services the manager should scan and connect.  For details see DeviceTypes.h</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property NSInteger searchType</Declaration>
			
			
			<Anchor>//api/name/searchType</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/BTDeviceManager/searchType</TokenIdentifier>
			<Abstract type="html">This value indicates what services the manager should scan and connect.  For details see DeviceTypes.h</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property NSInteger searchType</Declaration>
			
			
			<Anchor>//api/name/searchType</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/setIsActive:</TokenIdentifier>
			<Abstract type="html">This flag is to see if bluetooth use is allowed.  The manager will not be able to perform any operations
if the bluetooth service is off or not allowed by the user.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property BOOL isActive</Declaration>
			
			
			<Anchor>//api/name/isActive</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/isActive</TokenIdentifier>
			<Abstract type="html">This flag is to see if bluetooth use is allowed.  The manager will not be able to perform any operations
if the bluetooth service is off or not allowed by the user.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property BOOL isActive</Declaration>
			
			
			<Anchor>//api/name/isActive</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/BTDeviceManager/isActive</TokenIdentifier>
			<Abstract type="html">This flag is to see if bluetooth use is allowed.  The manager will not be able to perform any operations
if the bluetooth service is off or not allowed by the user.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property BOOL isActive</Declaration>
			
			
			<Anchor>//api/name/isActive</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/setWaitForDevices:</TokenIdentifier>
			<Abstract type="html">The timer that is used when the request to stop scanning has been done, but the device that is selected
does not have full discovery done.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property NSTimer *waitForDevices</Declaration>
			
			
			<Anchor>//api/name/waitForDevices</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/waitForDevices</TokenIdentifier>
			<Abstract type="html">The timer that is used when the request to stop scanning has been done, but the device that is selected
does not have full discovery done.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property NSTimer *waitForDevices</Declaration>
			
			
			<Anchor>//api/name/waitForDevices</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/BTDeviceManager/waitForDevices</TokenIdentifier>
			<Abstract type="html">The timer that is used when the request to stop scanning has been done, but the device that is selected
does not have full discovery done.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property NSTimer *waitForDevices</Declaration>
			
			
			<Anchor>//api/name/waitForDevices</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/setRunLoop:</TokenIdentifier>
			<Abstract type="html">The runloop that is used to check for device discovery to see if all characteristics needed have been
discovered.  The reference is stated so it can be canceld outside the method that calls it.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property NSRunLoop *runLoop</Declaration>
			
			
			<Anchor>//api/name/runLoop</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/runLoop</TokenIdentifier>
			<Abstract type="html">The runloop that is used to check for device discovery to see if all characteristics needed have been
discovered.  The reference is stated so it can be canceld outside the method that calls it.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property NSRunLoop *runLoop</Declaration>
			
			
			<Anchor>//api/name/runLoop</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/BTDeviceManager/runLoop</TokenIdentifier>
			<Abstract type="html">The runloop that is used to check for device discovery to see if all characteristics needed have been
discovered.  The reference is stated so it can be canceld outside the method that calls it.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property NSRunLoop *runLoop</Declaration>
			
			
			<Anchor>//api/name/runLoop</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/setDelegate:</TokenIdentifier>
			<Abstract type="html">The delegate is the object that receives a call back whenever the selected heart monitor or activity monitor
has changed.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) id delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/delegate</TokenIdentifier>
			<Abstract type="html">The delegate is the object that receives a call back whenever the selected heart monitor or activity monitor
has changed.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) id delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/BTDeviceManager/delegate</TokenIdentifier>
			<Abstract type="html">The delegate is the object that receives a call back whenever the selected heart monitor or activity monitor
has changed.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) id delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/setDiscoveryCount:</TokenIdentifier>
			<Abstract type="html">The counter that is used for requesting a new discovery of the device.  The setting is 5 seconds, and then a
rediscovery of the device begins.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property NSInteger discoveryCount</Declaration>
			
			
			<Anchor>//api/name/discoveryCount</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/discoveryCount</TokenIdentifier>
			<Abstract type="html">The counter that is used for requesting a new discovery of the device.  The setting is 5 seconds, and then a
rediscovery of the device begins.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property NSInteger discoveryCount</Declaration>
			
			
			<Anchor>//api/name/discoveryCount</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/BTDeviceManager/discoveryCount</TokenIdentifier>
			<Abstract type="html">The counter that is used for requesting a new discovery of the device.  The setting is 5 seconds, and then a
rediscovery of the device begins.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>@property NSInteger discoveryCount</Declaration>
			
			
			<Anchor>//api/name/discoveryCount</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/startScanForType:</TokenIdentifier>
			<Abstract type="html">This method starts the scanning process for a particular type of device. See
DeviceTypes.h for values relating to the kind of device to scan.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>- (void)startScanForType:(NSInteger)type</Declaration>
			<Parameters>
				<Parameter>
					<Name>type</Name>
					<Abstract type="html">The integer value representing the kind of services to scan and discover.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/startScanForType:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/BTDeviceManager/sharedManager</TokenIdentifier>
			<Abstract type="html">This is the preferred method of initialization.  This object is treated as a singleton
because nil objects and other conflicts will result from using more than one instance of
a CBCentral object, which is included in this object.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>+ (id)sharedManager</Declaration>
			
			<ReturnValue><Abstract type="html">The shared instance of a BTDeviceManager.</Abstract></ReturnValue>
			<Anchor>//api/name/sharedManager</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/discoveredDevicesForType:</TokenIdentifier>
			<Abstract type="html">This function gives the current count of the number of devices found in the
discovery process based on the type of device it is looking to find.  At this
time there is HEARTMONITOR and ACTIVITYMONITOR types.  See DeviceTypes.h for more
details.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>- (NSInteger)discoveredDevicesForType:(NSInteger)type</Declaration>
			<Parameters>
				<Parameter>
					<Name>type</Name>
					<Abstract type="html">The integer that designates whether a heart monitor or an activity monitor
will be the attempt to discover.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The number of devices found.</Abstract></ReturnValue>
			<Anchor>//api/name/discoveredDevicesForType:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/stopScan</TokenIdentifier>
			<Abstract type="html">This function allows remote shutdown of discovery process to conserve the battery.  Its purpose is to allow
the dismissal of selection viewcontrollers to shut the discovery because the devicemanager class is shared
throughout the application.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>- (void)stopScan</Declaration>
			
			
			<Anchor>//api/name/stopScan</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/disconnectSelectedMonitors</TokenIdentifier>
			<Abstract type="html">This method is for disconnecting the devices that are used for monitoring.  Both this method and the
connect Monitors are meant to keep the battery lasting longer by not keeping connectivity when not in use.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>- (void)disconnectSelectedMonitors</Declaration>
			
			
			<Anchor>//api/name/disconnectSelectedMonitors</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/connectSelectedMonitors</TokenIdentifier>
			<Abstract type="html">This method connects the monitoring devices that have been selected from the various other views.
It is used for the device poller to initiate the polling</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>- (void)connectSelectedMonitors</Declaration>
			
			
			<Anchor>//api/name/connectSelectedMonitors</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/disconnectAllDevices</TokenIdentifier>
			<Abstract type="html">This method is used to go through disconnecting every device after discovery.  It is used when the viewcontrollers
are being dismissed and the scanning is stopped.  In order to discover all the characteristics needed for
operation in other parts of the application, things like battery service, heart rate measurements etc must be
discovered and that can only happen when the devices are connected.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>- (void)disconnectAllDevices</Declaration>
			
			
			<Anchor>//api/name/disconnectAllDevices</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/selectDeviceType:atIndex:</TokenIdentifier>
			<Abstract type="html">This method is to be used by the tableviews so that individual devices can be selected and the appropriate
variables updated to reflect it.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>- (void)selectDeviceType:(NSInteger)type atIndex:(NSInteger)index</Declaration>
			<Parameters>
				<Parameter>
					<Name>type</Name>
					<Abstract type="html">The device type to select.  See DeviceTypes.h for details.</Abstract>
				</Parameter><Parameter>
					<Name>index</Name>
					<Abstract type="html">The index of the array of devices within a particular type.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/selectDeviceType:atIndex:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/deselectDeviceType:</TokenIdentifier>
			<Abstract type="html">This method is to be used by the tableviews so that individual devices can be deselected and the appropriate
variables updated to reflect it.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>- (void)deselectDeviceType:(NSInteger)type</Declaration>
			<Parameters>
				<Parameter>
					<Name>type</Name>
					<Abstract type="html">The device type to deselect.  See DeviceTypes.h for details.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/deselectDeviceType:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/deviceAtIndex:forType:</TokenIdentifier>
			<Abstract type="html">This method is used by the tableview to get the devices that they need to query for their
views.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>- (id&lt;DeviceCommonInfoInterface&gt;)deviceAtIndex:(NSInteger)index forType:(NSInteger)type</Declaration>
			<Parameters>
				<Parameter>
					<Name>index</Name>
					<Abstract type="html">The index within the device types that are the same.</Abstract>
				</Parameter><Parameter>
					<Name>type</Name>
					<Abstract type="html">The device type that the search is restricted to performing.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The device that is selected.  The DeviceCommonInfoInterface is the
restrictor and all devices must conform to this protocol, otherwise the result is
nil.</Abstract></ReturnValue>
			<Anchor>//api/name/deviceAtIndex:forType:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/monitorMatchingCBPeripheral:</TokenIdentifier>
			<Abstract type="html">This is a method that is to be used privately in this class.  It&apos;s purpose is to parse
the list of devices that this manager knows about and return a device object that matches
the CBPeripheral identifier.  Since the identifier is a name it is possible to have two
duplicate names.  This is a change to CBPeripheral where the name takes precendence over
the UUID of the device if it is known.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>- (id&lt;DeviceCommonInfoInterface&gt;)monitorMatchingCBPeripheral:(CBPeripheral *)device</Declaration>
			<Parameters>
				<Parameter>
					<Name>device</Name>
					<Abstract type="html">The CBPeripheral that is to be used for the search criteria.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A device object that conforms to the CommonDeviceInfoInterface.  Additional
introspection will be needed if you wish to see if the device conforms to one of
the other protocols.</Abstract></ReturnValue>
			<Anchor>//api/name/monitorMatchingCBPeripheral:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/selectedHeartMonitor</TokenIdentifier>
			<Abstract type="html">This getter returns the current selectedHeartMonitor.  The reference conforms to the
HeartMonitorProtocol and the DeviceCommonInfoInterface protocol.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>- (id&lt;HeartMonitorProtocol,DeviceCommonInfoInterface&gt;)selectedHeartMonitor</Declaration>
			
			<ReturnValue><Abstract type="html">the object reference for the heart monitor.  A check for nil is necessary because
it is possible to deselect the heart monitor.</Abstract></ReturnValue>
			<Anchor>//api/name/selectedHeartMonitor</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/setSelectedHeartMonitor:</TokenIdentifier>
			<Abstract type="html">This setter updates the selectedHeartMonitor as long as it conforms to the
HeartMonitorProtocol and the DeviceCommonInfoInterface.  It also notifies that delegate
that the value has changed.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>- (void)setSelectedHeartMonitor:(id&lt;HeartMonitorProtocol,DeviceCommonInfoInterface&gt;)selectedHeartMonitor</Declaration>
			<Parameters>
				<Parameter>
					<Name>selectedHeartMonitor</Name>
					<Abstract type="html">The heart mo0nitor that has been selected by the view controller.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setSelectedHeartMonitor:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/selectedActivityMonitor</TokenIdentifier>
			<Abstract type="html">This getter returns the current selectedActivityMonitor.  The reference conforms to the
ActivityMonitorProtocol and the DeviceCommonInfoInterface protocol.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>- (id&lt;ActivityMonitorProtocol,DeviceCommonInfoInterface&gt;)selectedActivityMonitor</Declaration>
			
			<ReturnValue><Abstract type="html">the object reference for the activity monitor.  A check for nil is necessary because
it is possible to deselect the activity monitor.</Abstract></ReturnValue>
			<Anchor>//api/name/selectedActivityMonitor</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/BTDeviceManager/setSelectedActivityMonitor:</TokenIdentifier>
			<Abstract type="html">This setter updates the selectedActivityMonitor as long as it conforms to the
ActivityMonitorProtocol and the DeviceCommonInfoInterface.  It also notifies that delegate
that the value has changed.</Abstract>
			<DeclaredIn>BTDeviceManager.h</DeclaredIn>
			
			<Declaration>- (void)setSelectedActivityMonitor:(id&lt;ActivityMonitorProtocol,DeviceCommonInfoInterface&gt;)selectedActivityMonitor</Declaration>
			<Parameters>
				<Parameter>
					<Name>selectedActivityMonitor</Name>
					<Abstract type="html">The activity monitor that has been selected by the view controller.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setSelectedActivityMonitor:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
        
        
	</File>
</Tokens>